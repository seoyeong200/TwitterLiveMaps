version: "3"

services:
    zookeeper:
        container_name: zookeeper
        image: wurstmeister/zookeeper
        ports:
            - "2181:2181" 

    kafka:
        container_name: kafka
        image: wurstmeister/kafka
        depends_on: 
            - zookeeper
        ports:
            - "9092:9092"
        expose:
            - "9093"
        environment: 
            KAFKA_ADVERTISED_HOST_NAME: localhost
            KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
            # listener 목록, kafka가 수신 대기를 위해 바인딩하는 host//ip:port (기본값 0.0.0.0-모든 인터페이스에서 수신 대기)
            KAFKA_LISTENERS: INSIDE://0.0.0.0:9093, OUTSIDE://0.0.0.0:9092
            # listener 목록, client에게 다시 전달되는 메타데이터, host//ip:port
            KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093, OUTSIDE://localhost:9092
            # listener 이름별로 사용할 보안 프로토콜의 key-value 쌍 정의
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
            # kafka broker는 일반적으로 내부 네트워크(docker network, aws vpc etc)에서 서로 통신하기 때문에, 
            # 사용할 listener 지정 (여기에 지정된 host//ip 는 브로커 시스템에서 다른 사람이 엑세스할 수 있어야함)
            KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
            # topic_name:#_of_partition:#_of_replicas
            KAFKA_CREATE_TOPICS: "rain:1:1, hot:1:1, subway:1:1"
            KAFKA_HEAP_OPTS: "-Xmx400m -Xms400m"
        volumes: 
            - /var/run/docker.sock:/var/run/docker.sock
    
    notebook:
        container_name: notebook
        user: root
        privileged: true
        image: jupyter/pyspark-notebook
        restart: always
        volumes:
            - ./notebook:/home/jovyan/work
        environment:
            - GRANT_SUDO=yes
        ports:
            - "4040:4040"
            - "4041:4041"
            - "8888:8888"

    
networks:
    default:
        name: default_network

        